{"ast":null,"code":"var _jsxFileName = \"/home/matheussg/Documentos/OmniStack10/Web/src/pages/Dev.js\";\nimport React, { useState, useEffect } from \"react\";\nimport api from \"../services/api.js\";\nimport \"../global.css\";\nimport \"../App.css\";\nimport \"../Sidebar.css\";\nimport \"../Main.css\";\nimport DevForm from \"../components/DevForm/index.js\";\nimport DevFormUpdate from \"../components/DevFormUpdate/index.js\";\nimport DevItem from \"../components/DevItem/index.js\";\nimport Header from \"../components/Header/index\"; // Componente -> Bloco isolado de HTML, CSS e JS o qual não interfere no restante da aplicação.\n// Propriedade -> Informações que um componente PAI passa para o componente FILHO\n// Estado -> Informações mantidas pelo componente (Lembrar: Imutabilidade)\n\nfunction Dev() {\n  const [devs, setDevs] = useState([]);\n  const [devUpdate, setDevUpdate] = useState([]);\n  const [insertForm, setInsertForm] = useState(true);\n  useEffect(() => {\n    async function loadDevs() {\n      const response = await api.get(\"/devs\");\n      setDevs(response.data);\n    }\n\n    loadDevs();\n  }, []);\n\n  async function handleAddDev(data) {\n    const response = await api.post(\"/devs\", data);\n    setDevs([...devs, response.data]);\n  }\n\n  async function deleteUser(deleteUser) {\n    await api.delete(`/devs/${deleteUser.dev._id}`);\n    let filtered = await devs.filter(elem => {\n      return elem._id !== deleteUser.dev._id;\n    });\n    setDevs(filtered);\n  }\n\n  async function changeFormToUpdate(devUpdate) {\n    await setInsertForm(true);\n    setDevUpdate(devUpdate.dev);\n    setInsertForm(false);\n  }\n\n  async function changeFormToCreate() {\n    setInsertForm(true);\n  }\n\n  async function handleUpdateDev(data) {\n    var mapped = devs.map(elem => {\n      if (elem._id === data._id) {\n        elem.name = data.name;\n        elem.bio = data.bio;\n        elem.techs = data.techs;\n        elem.location.coordinates[0] = data.longitude;\n        elem.location.coordinates[1] = data.latitude;\n      }\n\n      return elem;\n    });\n    await api.post(`/devs/${data._id}`, data);\n    setDevs(mapped);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"DevRadar\"), !insertForm ? React.createElement(DevFormUpdate, {\n    devUpdate: devUpdate,\n    onSubmitUpdate: handleUpdateDev,\n    changeFormToCreate: changeFormToCreate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }) : React.createElement(DevForm, {\n    onSubmit: handleAddDev,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), React.createElement(\"main\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, devs.map(dev => React.createElement(DevItem, {\n    key: dev._id,\n    dev: dev,\n    changeFormToUpdate: changeFormToUpdate,\n    deleteUser: deleteUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }))))));\n}\n\nexport default Dev;","map":{"version":3,"sources":["/home/matheussg/Documentos/OmniStack10/Web/src/pages/Dev.js"],"names":["React","useState","useEffect","api","DevForm","DevFormUpdate","DevItem","Header","Dev","devs","setDevs","devUpdate","setDevUpdate","insertForm","setInsertForm","loadDevs","response","get","data","handleAddDev","post","deleteUser","delete","dev","_id","filtered","filter","elem","changeFormToUpdate","changeFormToCreate","handleUpdateDev","mapped","map","name","bio","techs","location","coordinates","longitude","latitude"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport api from \"../services/api.js\";\n\nimport \"../global.css\";\nimport \"../App.css\";\nimport \"../Sidebar.css\";\nimport \"../Main.css\";\n\nimport DevForm from \"../components/DevForm/index.js\";\nimport DevFormUpdate from \"../components/DevFormUpdate/index.js\";\nimport DevItem from \"../components/DevItem/index.js\";\nimport Header from \"../components/Header/index\";\n\n// Componente -> Bloco isolado de HTML, CSS e JS o qual não interfere no restante da aplicação.\n// Propriedade -> Informações que um componente PAI passa para o componente FILHO\n// Estado -> Informações mantidas pelo componente (Lembrar: Imutabilidade)\n\n\n\nfunction Dev() {\n  const [devs, setDevs] = useState([]);\n  const [devUpdate, setDevUpdate] = useState([]);\n  const [insertForm, setInsertForm] = useState(true);\n  \n  useEffect(() => {\n    async function loadDevs() {\n      const response = await api.get(\"/devs\");\n      \n      setDevs(response.data);\n    }\n\n    loadDevs();\n  }, []);\n\n  async function handleAddDev(data) {\n    const response = await api.post(\"/devs\", data);\n\n    setDevs([...devs, response.data]);\n  }\n\n  async function deleteUser(deleteUser){\n    await api.delete(`/devs/${deleteUser.dev._id}`);\n\n    let filtered = await devs.filter((elem) => {\n      return elem._id !== deleteUser.dev._id;\n    })\n\n    setDevs(filtered);\n  }\n\n  async function changeFormToUpdate(devUpdate){\n    await setInsertForm(true);\n    setDevUpdate(devUpdate.dev);\n    setInsertForm(false);\n  }\n\n  async function changeFormToCreate(){\n    setInsertForm(true);\n  }\n\n  async function handleUpdateDev(data){\n\n    var mapped = devs.map((elem) =>{\n      if(elem._id === data._id){\n        elem.name = data.name;\n        elem.bio = data.bio;\n        elem.techs = data.techs;\n        elem.location.coordinates[0] = data.longitude;\n        elem.location.coordinates[1] = data.latitude;\n      }\n      return elem;\n    })\n\n    await api.post(`/devs/${data._id}`, data);\n    setDevs(mapped);\n  }\n\n  \n\n  return (\n    <div>\n      <Header />\n      <div id=\"app\">\n        <aside>\n          <strong>DevRadar</strong>\n          {!insertForm ? <DevFormUpdate devUpdate={devUpdate} onSubmitUpdate={handleUpdateDev} changeFormToCreate={changeFormToCreate} /> : <DevForm onSubmit={handleAddDev} />}\n        </aside>\n        <main>\n          <ul>\n            {devs.map(dev => (\n              <DevItem key={dev._id} dev={dev} changeFormToUpdate={changeFormToUpdate} deleteUser={deleteUser} />\n              ))}\n          </ul>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Dev;\n"]},"metadata":{},"sourceType":"module"}